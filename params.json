{
  "name": "Hbasepy",
  "tagline": "A simple hbase REST client.",
  "body": "# hbasepy\r\nA simple hbase REST client. \r\n\r\n##Features\r\n- Cluster version/status\r\n- Namespace CRUD\r\n- Table CRUD\r\n- Bulk inserts\r\n- Scan\r\n- Prefix scan\r\n- Multiget\r\n\r\n##Install\r\n```\r\npip install hbasepy\r\n```\r\n\r\n##Usage\r\n```\r\n>>> import hbasepy\r\n>>> c = hbasepy.Client('http://domain.com:8070')\r\n```\r\n\r\n##Cluster\r\n###Versions\r\n```\r\n>>> c.version()\r\nu'1.2.2'\r\n```\r\n\r\n###Status\r\n```\r\n>>> c.status().keys()\r\n[u'regions', u'DeadNodes', u'requests', u'LiveNodes', u'averageLoad']\r\n```\r\n\r\n###Info\r\n```\r\n>>> c.info()\r\n{u'OS': u'Linux 4.4.19-29.55.amzn1.x86_64 amd64', u'JVM': u'Oracle Corporation 1.8.0_101-25.101-b13', u'REST': u'0.0.3', u'Jersey': u'1.9', u'Server': u'jetty/6.1.26'}\r\n```\r\n\r\n##Namespace\r\n###List\r\n```\r\n>>> c.namespaces()\r\n[u'default', u'hbase']\r\n```\r\n\r\n###Get\r\n```\r\n>>> c.namespace('testns')\r\n{u'properties': None}\r\n```\r\n\r\n###Create\r\n```\r\n>>> c.namespace_create('testns')\r\nTrue\r\n```\r\n\r\n###Tables\r\n```\r\n>>> c.namespace_tables('testns')\r\n[]\r\n```\r\n\r\n###Alter\r\n```\r\n>>> c.namespace_alter('testns')\r\nTrue\r\n```\r\n\r\n###Delete\r\n```\r\n>>> c.namespace_delete('testns')\r\nTrue\r\n```\r\n\r\n##Table\r\n###List\r\n```\r\n>>> c.tables()\r\n[u'test']\r\n```\r\n\r\n###Get\r\n```\r\n>>> c.table_schema('test')\r\n{u'ColumnSchema': [{u'BLOCKCACHE': u'true', u'name': u'col', u'VERSIONS': u'1', u'KEEP_DELETED_CELLS': u'FALSE', u'maxVersions': u'1', u'BLOCKSIZE': u'65536', u'MIN_VERSIONS': u'0', u'DATA_BLOCK_ENCODING': u'NONE', u'REPLICATION_SCOPE': u'0', u'TTL': u'2147483647', u'IN_MEMORY': u'false', u'BLOOMFILTER': u'ROW', u'COMPRESSION': u'NONE'}], u'name': u'test', u'IS_META': u'false'}\r\n```\r\n\r\n###Create\r\n```\r\n>>> c.table_create('test', [{'name': 'col', 'maxVersions': 1}])\r\nTrue\r\n```\r\n\r\n###Update\r\nReplace the table definition. You have to specify existing column you want to keep. If you don't they are dropped.\r\n```\r\n>>> c.table_update('test', [{'name': 'col', 'maxVersions': 1}, {'name': 'col2'}])\r\nTrue\r\n```\r\n\r\n###Regions\r\n```\r\n>>> c.table_regions('test')\r\n{u'Region': [{u'startKey': u'', u'endKey': u'', u'id': 1478813628562, u'name': u'test,,1478813628562.c905e2fcc2e543bc139bbd5796bf3de3.', u'location': u'ip-X-X-X-X.us-west-2.compute.internal:16020'}], u'name': u'test'}\r\n```\r\n\r\n###Delete\r\n```\r\n>>> c.table_delete('test')\r\nTrue\r\n```\r\n\r\n##Put data\r\nValues is format `'c:f': 'val'` where `val` must be an instance of `basestring` to be base64 encoded.\r\n```\r\nc.put('test', [{'key': '1:1', 'values': {'yo:lll': '1111s', 'yo:2': '22222'}}, {'key': '1:2', 'values': {'yo:qqq': 'wwrt'}}])\r\nTrue\r\n```\r\n\r\n##Scan\r\n```\r\n>>> for k, v in c.scan('test'):\r\n...   print k\r\n...\r\n1:1\r\n1:2\r\n\r\n>>> for k, v in c.scan('test', prefix='1:'):\r\n...   print k\r\n...\r\n1:1\r\n1:2\r\n\r\n>>> for k, v in c.scan('test', prefix='1:', columns=['yo:2']):\r\n...   print k\r\n...\r\n1:1\r\n```\r\n\r\n##Get row\r\n```\r\n>>> c.get('test', '1:1')\r\n('1:1', {'yo:lll': '1111s', 'yo:2': '22222'})\r\n\r\n>>> c.get('test', '1:1', cf='yo:2')\r\n('1:1', {'yo:2': '22222'})\r\n\r\n>>> c.get('test', '1:2', include_timestamp=True)\r\n('1:2', {'yo:qqq': ('wwrt', 1478913898453)})\r\n```\r\n\r\n##Get many\r\n```\r\n>>> for k, v in c.get_many('test', ['1:1', '1:2']):\r\n...   print k, v\r\n...\r\n1:1 {'yo:lll': '1111s', 'yo:2': '22222'}\r\n1:2 {'yo:qqq': 'wwrt'}\r\n```\r\n\r\n##Missing feature?\r\nThe lib doesn't cover all endpoint options. You can always open a pr with new ones. If you have more info on the `/multiget` endpoint please open an issue. I found it in a mailing list without any spec like column filter, timestamp filter, etc. \r\n\r\n##Run tests\r\n```\r\n$ py.test tests.py\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}